{"version":3,"sources":["webpack:///./src/templates/blog-post.tsx"],"names":["query","Img","alt","props","sx","display","marginBottom","marginLeft","marginRight","maxWidth","width","serializers","marks","link","a","mark","children","types","block","node","style","test","replace","h2","h3","h4","h5","h6","h1","p","BlockContent","defaultSerializers","BlogPost","data","landingPage","sanityPost","title","heroImage","asset","fluid","blocks","_rawBody","to"],"mappings":"8SAWO,IAAMA,EAAQ,aAgBfC,EAAqD,SAAC,GAAD,IACzDC,EADyD,EACzDA,IACGC,E,oIAFsD,mBAIzD,YAAC,IAAD,eACED,IAAKA,GACDC,EAFN,CAGEC,GAAI,CACFC,QAAS,QACTC,aAAc,YACd,uCAAwC,CACtCC,WAAY,qBACZC,YAAa,qBACbC,SAAU,OACVC,MAAO,QAET,wCAAyC,CACvCH,WAAY,SACZC,YAAa,SACbC,SAAU,SACVC,MAAO,eAaTC,EAA2B,CAC/BC,MAAO,CAELC,KAAM,SAAAV,GAAK,OAAI,YAAC,IAAOW,EAAMX,EAAMY,KAAOZ,EAAMa,YAElDC,MAAO,CACLC,MAAO,SAAAf,GAAS,MACeA,EAAMgB,KAA3BC,aADM,MACE,SADF,EAGd,GAAI,OAAOC,KAAKD,GAEd,OADcA,EAAME,QAAQ,SAAU,KAEpC,IAAK,IACH,OAAO,YAAC,IAAOC,GAAR,KAAYpB,EAAMa,UAC3B,IAAK,IACH,OAAO,YAAC,IAAOQ,GAAR,KAAYrB,EAAMa,UAC3B,IAAK,IACH,OAAO,YAAC,IAAOS,GAAR,KAAYtB,EAAMa,UAC3B,IAAK,IACH,OAAO,YAAC,IAAOU,GAAR,KAAYvB,EAAMa,UAC3B,IAAK,IACH,OAAO,YAAC,IAAOW,GAAR,KAAYxB,EAAMa,UAC3B,QACE,OAAO,YAAC,IAAOY,GAAR,KAAYzB,EAAMa,UAI/B,MAAc,MAAVI,EACK,YAAC,IAAOS,EAAR,KAAW1B,EAAMa,UAEZ,eAAVI,EACK,mCAAejB,EAAMa,UAIvBc,IAAaC,mBAAmBd,MAAMC,MAAMf,MA8B1C6B,UA1BE,SAAC,GAAD,IACfC,EADe,EACfA,KADe,OAKf,YAAC,IAAD,CAAQC,aAAa,GACnB,YAAC,IAAD,KACE,2BACE,YAAC,IAAON,GAAR,KAAYK,EAAKE,WAAWC,SACzBH,EAAKE,WAAWE,UAAUC,OAC3B,YAACrC,EAAD,CACEsC,MAAON,EAAKE,WAAWE,UAAUC,MAAMC,MACvCrC,IAAK+B,EAAKE,WAAWC,QAGzB,YAAC,IAAD,CACEI,OAAQP,EAAKE,WAAWM,SACxB9B,YAAaA,IAEf,uBACA,uBACA,YAAC,IAAD,CAAM+B,GAAG,SAAT","file":"component---src-templates-blog-post-tsx-1a3861a8b8096690f43d.js","sourcesContent":["/** @jsx jsx */\nimport { jsx, Styled } from 'theme-ui';\nimport * as React from 'react';\nimport { graphql, Link } from 'gatsby';\n\nimport Image, { FluidObject } from 'gatsby-image';\nimport BlockContent from '@sanity/block-content-to-react';\n\nimport Layout from '../components/Layout';\nimport { Container } from '../components/Layout/Container';\nimport { PostTeaserProps } from '../components/Blog/PostTeaser';\nexport const query = graphql`\n  query($slug: String) {\n    sanityPost(slug: { current: { eq: $slug } }) {\n      title\n      _rawBody\n      heroImage {\n        asset {\n          fluid(maxWidth: 1080) {\n            ...GatsbySanityImageFluid\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst Img: React.FC<{ alt: string; fluid: FluidObject }> = ({\n  alt,\n  ...props\n}) => (\n  <Image\n    alt={alt}\n    {...props}\n    sx={{\n      display: 'block',\n      marginBottom: '1.66667em',\n      '@media screen and (min-width: 800px)': {\n        marginLeft: 'calc(360px - 47vw)',\n        marginRight: 'calc(360px - 47vw)',\n        maxWidth: '94vw',\n        width: '94vw',\n      },\n      '@media screen and (min-width: 1141px)': {\n        marginLeft: '-180px',\n        marginRight: '-180px',\n        maxWidth: '1080px',\n        width: '1080px',\n      },\n    }}\n  />\n);\ninterface Serializers {\n  marks: {\n    link: React.FC<{ mark: { href?: string } }>;\n  };\n  types: {\n    block: React.FC<{ node: { style: string } }>;\n  };\n}\nconst serializers: Serializers = {\n  marks: {\n    // eslint-disable-next-line react/display-name\n    link: props => <Styled.a {...props.mark}>{props.children}</Styled.a>,\n  },\n  types: {\n    block: props => {\n      const { style = 'normal' } = props.node;\n\n      if (/^h\\d/.test(style)) {\n        const level = style.replace(/[^\\d]/g, '');\n        switch (level) {\n          case '2':\n            return <Styled.h2>{props.children}</Styled.h2>;\n          case '3':\n            return <Styled.h3>{props.children}</Styled.h3>;\n          case '4':\n            return <Styled.h4>{props.children}</Styled.h4>;\n          case '5':\n            return <Styled.h5>{props.children}</Styled.h5>;\n          case '6':\n            return <Styled.h6>{props.children}</Styled.h6>;\n          default:\n            return <Styled.h1>{props.children}</Styled.h1>;\n        }\n      }\n\n      if (style === 'p') {\n        return <Styled.p>{props.children}</Styled.p>;\n      }\n      if (style === 'blockquote') {\n        return <blockquote>- {props.children}</blockquote>;\n      }\n\n      // Fall back to default handling\n      return BlockContent.defaultSerializers.types.block(props);\n    },\n  },\n};\nconst BlogPost = ({\n  data,\n}: {\n  data: { sanityPost: PostTeaserProps['post'] & { _rawBody: {} } };\n}) => (\n  <Layout landingPage={false}>\n    <Container>\n      <article>\n        <Styled.h1>{data.sanityPost.title}</Styled.h1>\n        {!!data.sanityPost.heroImage.asset && (\n          <Img\n            fluid={data.sanityPost.heroImage.asset.fluid}\n            alt={data.sanityPost.title}\n          />\n        )}\n        <BlockContent\n          blocks={data.sanityPost._rawBody}\n          serializers={serializers}\n        />\n        <br />\n        <br />\n        <Link to=\"/blog\">Back to blog overview</Link>\n      </article>\n    </Container>\n  </Layout>\n);\nexport default BlogPost;\n"],"sourceRoot":""}